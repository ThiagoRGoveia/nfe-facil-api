import { Args, Mutation, Query, Resolver } from '@nestjs/graphql';
import { {{singularPascal}} } from '../../../domain/entities/{{singularKebab}}.entity';
import { Create{{singularPascal}}Dto } from '../../../application/dtos/create-{{singularKebab}}.dto';
import { Update{{singularPascal}}Dto } from '../../../application/dtos/update-{{singularKebab}}.dto';
import { {{singularPascal}}DbPort } from '../../../application/ports/{{singularKebab}}-db.port';
import { Create{{singularPascal}}UseCase } from '../../../application/use-cases/create-{{singularKebab}}.use-case';
import { Update{{singularPascal}}UseCase } from '../../../application/use-cases/update-{{singularKebab}}.use-case';
import { Delete{{singularPascal}}UseCase } from '../../../application/use-cases/delete-{{singularKebab}}.use-case';

@Resolver(() => {{singularPascal}})
export class {{featurePascal}}Resolver {
  constructor(
    private readonly {{singularCamel}}DbPort: {{singularPascal}}DbPort,
    private readonly create{{singularPascal}}UseCase: Create{{singularPascal}}UseCase,
    private readonly update{{singularPascal}}UseCase: Update{{singularPascal}}UseCase,
    private readonly delete{{singularPascal}}UseCase: Delete{{singularPascal}}UseCase,
  ) {}

  @Query(() => {{singularPascal}}, { nullable: true })
  async find{{singularPascal}}ById(@Args('id') id: string): Promise<{{singularPascal}} | null> {
    return this.{{singularCamel}}DbPort.findById(id);
  }

  @Query(() => [{{singularPascal}}])
  async findAll{{pluralPascal}}(): Promise<{{singularPascal}}[]> {
    return this.{{singularCamel}}DbPort.findAll();
  }

  @Mutation(() => {{singularPascal}})
  async create{{singularPascal}}(
    @Args('input') input: Create{{singularPascal}}Dto,
  ): Promise<{{singularPascal}}> {
    return this.create{{singularPascal}}UseCase.execute(input);
  }

  @Mutation(() => {{singularPascal}})
  async update{{singularPascal}}(
    @Args('id') id: string,
    @Args('input') input: Update{{singularPascal}}Dto,
  ): Promise<{{singularPascal}}> {
    return this.update{{singularPascal}}UseCase.execute({
      id,
      data: input,
    });
  }

  @Mutation(() => Boolean)
  async delete{{singularPascal}}(@Args('id') id: string): Promise<boolean> {
    await this.delete{{singularPascal}}UseCase.execute({ id });
    return true;
  }
} 