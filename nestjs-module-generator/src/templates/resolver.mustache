import { Args, Mutation, Query, Resolver } from '@nestjs/graphql';
import { {{singularPascal}} } from '../../../domain/entities/{{singularKebab}}.entity';
import { Create{{singularPascal}}Dto } from '../../../application/dtos/create-{{singularKebab}}.dto';
import { Update{{singularPascal}}Dto } from '../../../application/dtos/update-{{singularKebab}}.dto';
import { {{singularPascal}}DbPort } from '../../../application/ports/{{pluralKebab}}-db.port';
import { Create{{singularPascal}}UseCase } from '../../../application/use-cases/create-{{singularKebab}}.use-case';
import { Update{{singularPascal}}UseCase } from '../../../application/use-cases/update-{{singularKebab}}.use-case';
import { Delete{{singularPascal}}UseCase } from '../../../application/use-cases/delete-{{singularKebab}}.use-case';
import { PaginatedResponse } from '@/infra/types/paginated-response.type';
import { PaginatedGraphqlResponse } from '@/infra/graphql/factories/paginated-response.factory';
import { Filters } from '@/infra/dtos/filter.dto';
import { Pagination } from '@/infra/dtos/pagination.dto';
import { Sort } from '@/infra/dtos/sort.dto';

const Paginated{{pluralPascal}} = PaginatedGraphqlResponse({{singularPascal}});

@Resolver(() => {{singularPascal}})
export class {{featurePascal}}Resolver {
  constructor(
    private readonly {{singularCamel}}DbPort: {{singularPascal}}DbPort,
    private readonly create{{singularPascal}}UseCase: Create{{singularPascal}}UseCase,
    private readonly update{{singularPascal}}UseCase: Update{{singularPascal}}UseCase,
    private readonly delete{{singularPascal}}UseCase: Delete{{singularPascal}}UseCase,
  ) {}

  @Query(() => {{singularPascal}}, { nullable: true })
  async find{{singularPascal}}ById(@Args('id', { type: () => Number }) id: number): Promise<{{singularPascal}} | null> {
    return this.{{singularCamel}}DbPort.findById(id);
  }

  @Query(() => Paginated{{pluralPascal}})
  async findAll{{pluralPascal}}(
    @Args('filters', { nullable: true }) filters?: Filters,
    @Args('pagination', { nullable: true }) pagination?: Pagination,
    @Args('sort', { nullable: true }) sort?: Sort,
  ): Promise<PaginatedResponse<{{singularPascal}}>> {
    return this.{{singularCamel}}DbPort.findAll(filters?.filters, pagination, sort);
  }

  @Mutation(() => {{singularPascal}})
  async create{{singularPascal}}(@Args('input') input: Create{{singularPascal}}Dto): Promise<{{singularPascal}}> {
    return this.create{{singularPascal}}UseCase.execute(input);
  }

  @Mutation(() => {{singularPascal}})
  async update{{singularPascal}}(
    @Args('id', { type: () => Number }) id: number,
    @Args('input') input: Update{{singularPascal}}Dto,
  ): Promise<{{singularPascal}}> {
    return this.update{{singularPascal}}UseCase.execute({
      id,
      data: input,
    });
  }

  @Mutation(() => Boolean)
  async delete{{singularPascal}}(@Args('id', { type: () => Number }) id: number): Promise<boolean> {
    await this.delete{{singularPascal}}UseCase.execute({ id });
    return true;
  }
} 