import { Test, TestingModule } from '@nestjs/testing';
import { {{singularPascal}}Controller } from '../{{singularKebab}}.controller';
import { Create{{singularPascal}}UseCase } from '../../../application/use-cases/create-{{singularKebab}}.use-case';
import { Update{{singularPascal}}UseCase } from '../../../application/use-cases/update-{{singularKebab}}.use-case';
import { Delete{{singularPascal}}UseCase } from '../../../application/use-cases/delete-{{singularKebab}}.use-case';
import { {{singularPascal}}DbPort } from '../../../application/ports/{{singularKebab}}-db.port';
import { Create{{singularPascal}}Dto } from '../../../application/dtos/create-{{singularKebab}}.dto';
import { Update{{singularPascal}}Dto } from '../../../application/dtos/update-{{singularKebab}}.dto';
import { Pagination } from '@/infra/dtos/pagination.dto';
import { Filter } from '@/infra/dtos/filter.dto';
import { Sort } from '@/infra/dtos/sort.dto';

describe('{{singularPascal}}Controller', () => {
  let controller: {{singularPascal}}Controller;
  let create{{singularPascal}}UseCase: Create{{singularPascal}}UseCase;
  let update{{singularPascal}}UseCase: Update{{singularPascal}}UseCase;
  let delete{{singularPascal}}UseCase: Delete{{singularPascal}}UseCase;
  let {{singularCamel}}DbPort: {{singularPascal}}DbPort;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [{{singularPascal}}Controller],
      providers: [
        {
          provide: Create{{singularPascal}}UseCase,
          useValue: { execute: jest.fn() },
        },
        {
          provide: Update{{singularPascal}}UseCase,
          useValue: { execute: jest.fn() },
        },
        {
          provide: Delete{{singularPascal}}UseCase,
          useValue: { execute: jest.fn() },
        },
        {
          provide: {{singularPascal}}DbPort,
          useValue: { findById: jest.fn(), findAll: jest.fn() },
        },
      ],
    }).compile();

    controller = module.get<{{singularPascal}}Controller>({{singularPascal}}Controller);
    create{{singularPascal}}UseCase = module.get<Create{{singularPascal}}UseCase>(Create{{singularPascal}}UseCase);
    update{{singularPascal}}UseCase = module.get<Update{{singularPascal}}UseCase>(Update{{singularPascal}}UseCase);
    delete{{singularPascal}}UseCase = module.get<Delete{{singularPascal}}UseCase>(Delete{{singularPascal}}UseCase);
    {{singularCamel}}DbPort = module.get<{{singularPascal}}DbPort>({{singularPascal}}DbPort);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  describe('create', () => {
    it('should create a {{singularKebab}}', async () => {
      const createDto = new Create{{singularPascal}}Dto();
      const expected = { id: 'test-id' };
      jest.spyOn(create{{singularPascal}}UseCase, 'execute').mockResolvedValue(expected);

      const result = await controller.create(createDto);

      expect(result).toBe(expected);
      expect(create{{singularPascal}}UseCase.execute).toHaveBeenCalledWith(createDto);
    });
  });

  describe('findOne', () => {
    it('should find a {{singularKebab}} by id', async () => {
      const id = 'test-id';
      const expected = { id };
      jest.spyOn({{singularCamel}}DbPort, 'findById').mockResolvedValue(expected);

      const result = await controller.findOne(id);

      expect(result).toBe(expected);
      expect({{singularCamel}}DbPort.findById).toHaveBeenCalledWith(id);
    });
  });

  describe('findAll', () => {
    it('should find all {{pluralKebab}}', async () => {
      const pagination = new Pagination();
      const filter = new Filter();
      const sort = new Sort();
      const expected = [{ id: 'test-id' }];
      jest.spyOn({{singularCamel}}DbPort, 'findAll').mockResolvedValue(expected);

      const result = await controller.findAll(pagination, filter, sort);

      expect(result).toBe(expected);
      expect({{singularCamel}}DbPort.findAll).toHaveBeenCalled();
    });
  });

  describe('update', () => {
    it('should update a {{singularKebab}}', async () => {
      const id = 'test-id';
      const updateDto = new Update{{singularPascal}}Dto();
      const expected = { id };
      jest.spyOn(update{{singularPascal}}UseCase, 'execute').mockResolvedValue(expected);

      const result = await controller.update(id, updateDto);

      expect(result).toBe(expected);
      expect(update{{singularPascal}}UseCase.execute).toHaveBeenCalledWith({
        id,
        data: updateDto,
      });
    });
  });

  describe('remove', () => {
    it('should remove a {{singularKebab}}', async () => {
      const id = 'test-id';
      jest.spyOn(delete{{singularPascal}}UseCase, 'execute').mockResolvedValue(undefined);

      await controller.remove(id);

      expect(delete{{singularPascal}}UseCase.execute).toHaveBeenCalledWith({ id });
    });
  });
}); 