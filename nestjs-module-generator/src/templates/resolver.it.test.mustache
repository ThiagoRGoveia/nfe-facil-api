import * as request from 'supertest';
import { INestApplication } from '@nestjs/common';
import { MikroORM, EntityManager } from '@mikro-orm/core';
import { Test, TestingModule } from '@nestjs/testing';
import { useDbRefresh, useDbSchema } from 'test/setup/integration/db-schema.seed';
import { {{featurePascal}}Module } from '@/core/{{featureKebab}}/{{featureKebab}}.module';
import { UsersModule } from '@/core/users/users.module';
import { useGraphqlModule } from 'test/setup/integration/graphql-integration-test.module';
import { useDbUser } from '@/infra/tests/factories/user.factory';
import { User } from '@/core/users/domain/entities/user.entity';
import { {{featurePascal}}Resolver } from '../{{featureKebab}}.resolver';

describe('{{featurePascal}}Resolver (Integration)', () => {
  let app: INestApplication;
  let orm: MikroORM;
  let em: EntityManager;
  let user: User;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      imports: [useGraphqlModule(() => user), UsersModule, {{featurePascal}}Module],
      providers: [{{featurePascal}}Resolver],
    }).compile();

    orm = module.get<MikroORM>(MikroORM);
    em = module.get<EntityManager>(EntityManager);
    app = module.createNestApplication();
    await useDbSchema(orm);
    await app.init();
    user = await useDbUser({}, em);
  });

  afterEach(async () => {
    await useDbRefresh(orm);
    await app.close();
  });
}); 