import { Test, TestingModule } from '@nestjs/testing';
import { createMock } from '@golevelup/ts-jest';
import { EntityManager } from '@mikro-orm/postgresql';
import { useUnitTestModule } from 'test/setup/base-unit-test.module';
import { useUserFactory } from '@/infra/tests/factories/user.factory';
import { {{singularPascal}}DbPort } from '../../ports/{{pluralKebab}}-db.port';
{{#isCreate}}
import { Create{{singularPascal}}UseCase } from '../create-{{singularKebab}}.use-case';
{{/isCreate}}
{{#isUpdate}}
import { Update{{singularPascal}}UseCase } from '../update-{{singularKebab}}.use-case';
{{/isUpdate}}
{{^isCreate}}
{{^isUpdate}}
import { {{operation}}{{singularPascal}}UseCase } from '../{{operation}}-{{singularKebab}}.use-case';
{{/isUpdate}}
{{/isCreate}}
import { use{{singularPascal}}Factory } from '@/infra/tests/factories/{{singularKebab}}.factory';

{{#isCreate}}
describe('Create{{singularPascal}}UseCase', () => {
  let useCase: Create{{singularPascal}}UseCase;
  let {{singularCamel}}DbPort: jest.Mocked<{{singularPascal}}DbPort>;
  let em: EntityManager;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      imports: [useUnitTestModule()],
      providers: [
        Create{{singularPascal}}UseCase,
        {
          provide: {{singularPascal}}DbPort,
          useValue: createMock<{{singularPascal}}DbPort>(),
        },
      ],
    }).compile();

    useCase = module.get<Create{{singularPascal}}UseCase>(Create{{singularPascal}}UseCase);
    {{singularCamel}}DbPort = module.get({{singularPascal}}DbPort);
    em = module.get(EntityManager);
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  it('should be defined', () => {
    expect(useCase).toBeDefined();
  });

  it('should create {{singularCamel}} successfully', async () => {
    // Arrange
    const user = useUserFactory({ id: 1 }, em);
    const {{singularCamel}} = use{{singularPascal}}Factory({ id: 1 }, em);
    const data = {
      name: 'Test {{singularPascal}}',
    };

    {{singularCamel}}DbPort.save.mockResolvedValue({{singularCamel}});

    // Act
    const result = await useCase.execute({
      user,
      data,
    });

    // Assert
    expect({{singularCamel}}DbPort.save).toHaveBeenCalled();
    expect(result).toBe({{singularCamel}});
  });

  it('should handle creation errors', async () => {
    // Arrange
    const user = useUserFactory({ id: 1 }, em);
    const error = new Error('Database error');
    const data = {
      name: 'Test {{singularPascal}}',
    };

    {{singularCamel}}DbPort.save.mockRejectedValue(error);

    // Act & Assert
    await expect(
      useCase.execute({
        user,
        data,
      }),
    ).rejects.toThrow(error);
  });
});
{{/isCreate}}

{{#isUpdate}}
describe('Update{{singularPascal}}UseCase', () => {
  let useCase: Update{{singularPascal}}UseCase;
  let {{singularCamel}}DbPort: jest.Mocked<{{singularPascal}}DbPort>;
  let em: EntityManager;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      imports: [useUnitTestModule()],
      providers: [
        Update{{singularPascal}}UseCase,
        {
          provide: {{singularPascal}}DbPort,
          useValue: createMock<{{singularPascal}}DbPort>(),
        },
      ],
    }).compile();

    useCase = module.get<Update{{singularPascal}}UseCase>(Update{{singularPascal}}UseCase);
    {{singularCamel}}DbPort = module.get({{singularPascal}}DbPort);
    em = module.get(EntityManager);
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  it('should be defined', () => {
    expect(useCase).toBeDefined();
  });

  it('should update {{singularCamel}} successfully', async () => {
    // Arrange
    const user = useUserFactory({ id: 1 }, em);
    const {{singularCamel}} = use{{singularPascal}}Factory({ id: 1 }, em);
    const data = {
      name: 'Updated {{singularPascal}}',
    };

    {{singularCamel}}DbPort.findById.mockResolvedValue({{singularCamel}});
    {{singularCamel}}DbPort.save.mockResolvedValue({ ...{{singularCamel}}, ...data });

    // Act
    const result = await useCase.execute({
      user,
      id: {{singularCamel}}.id,
      data,
    });

    // Assert
    expect({{singularCamel}}DbPort.findById).toHaveBeenCalledWith({{singularCamel}}.id);
    expect({{singularCamel}}DbPort.save).toHaveBeenCalled();
    expect(result).toEqual(expect.objectContaining(data));
  });

  it('should throw error when {{singularCamel}} not found', async () => {
    // Arrange
    const user = useUserFactory({ id: 1 }, em);
    const data = {
      name: 'Updated {{singularPascal}}',
    };

    {{singularCamel}}DbPort.findById.mockResolvedValue(null);

    // Act & Assert
    await expect(
      useCase.execute({
        user,
        id: 'non-existent-id',
        data,
      }),
    ).rejects.toThrow('{{singularPascal}} not found');
  });

  it('should handle update errors', async () => {
    // Arrange
    const user = useUserFactory({ id: 1 }, em);
    const {{singularCamel}} = use{{singularPascal}}Factory({ id: 1 }, em);
    const error = new Error('Database error');
    const data = {
      name: 'Updated {{singularPascal}}',
    };

    {{singularCamel}}DbPort.findById.mockResolvedValue({{singularCamel}});
    {{singularCamel}}DbPort.save.mockRejectedValue(error);

    // Act & Assert
    await expect(
      useCase.execute({
        user,
        id: {{singularCamel}}.id,
        data,
      }),
    ).rejects.toThrow(error);
  });
});
{{/isUpdate}}

{{^isCreate}}
{{^isUpdate}}
describe('{{operation}}{{singularPascal}}UseCase', () => {
  let useCase: {{operation}}{{singularPascal}}UseCase;
  let {{singularCamel}}DbPort: jest.Mocked<{{singularPascal}}DbPort>;
  let em: EntityManager;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      imports: [useUnitTestModule()],
      providers: [
        {{operation}}{{singularPascal}}UseCase,
        {
          provide: {{singularPascal}}DbPort,
          useValue: createMock<{{singularPascal}}DbPort>(),
        },
      ],
    }).compile();

    useCase = module.get<{{operation}}{{singularPascal}}UseCase>({{operation}}{{singularPascal}}UseCase);
    {{singularCamel}}DbPort = module.get({{singularPascal}}DbPort);
    em = module.get(EntityManager);
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  it('should be defined', () => {
    expect(useCase).toBeDefined();
  });

  it('should have {{singularCamel}}DbPort injected', () => {
    expect({{singularCamel}}DbPort).toBeDefined();
  });
});
{{/isUpdate}}
{{/isCreate}} 